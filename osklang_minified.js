function exists(t){return null!=t}function truthy(t){return![null,void 0,!1].includes(t)}function mod(t,e){return(t%e+e)%e}function type(t){return null===t?"nil":t?.constructor===Array?"list":typeof t}const prompt=require("prompt-sync")(),XMLHttpRequest=require("xmlhttprequest").XMLHttpRequest,TOKEN={PLUS:"PLUS",MIN:"MIN",MUL:"MUL",DIV:"DIV",MOD:"MOD",HASH:"HASH",INT:"INT",FLOAT:"FLOAT",BOOLEAN:"BOOLEAN",STRING:"STRING",NIL:"NIL",NOT:"NOT",AND:"AND",OR:"OR",EQ:"EQ",EE:"EE",NE:"NE",GTE:"GTE",GT:"GT",LTE:"LTE",LT:"LT",ARROW:"ARROW",PE:"PE",ME:"ME",LPAREN:"LPAREN",RPAREN:"RPAREN",LSQUARE:"LSQUARE",RSQUARE:"RSQUARE",COMMA:"COMMA",IDENTIFIER:"IDENTIFIER",KEYWORD:"KEYWORD",NEWLINE:"NEWLINE",EOF:"EOF"},KEYWORDS=["function","return","for","while","if","elif","else","do","end"],DIGITS="1234567890",LETTERS="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";class OsklangError{constructor(t,e,r,n){this.start=t,this.end=e,this.name=r,this.details=n,this.lineText=t.fileText.split("\r\n")[t.line]}}OsklangError.prototype.toString=function(){return`${this.name}: ${this.details}
  File ${this.start.fileName}, line ${this.start.line+1}, column ${this.start.column+1}`};class IllegalCharError extends OsklangError{constructor(t,e,r){super(t,e,"Illegal Character",r)}}class InvalidSyntaxError extends OsklangError{constructor(t,e,r){super(t,e,"Invalid Syntax",r)}}class RuntimeError extends OsklangError{constructor(t,e,r,n){super(t,e,"Runtime Error",r),this.context=n}generateTraceback(){let t="",e=this.start,r=this.context;for(;r;)t+=`  File ${e.fileName}, line ${e.line+1}, column ${e.column+1}, in ${r.displayName}
`,e=r.pos,r=r.parent;return"Traceback (most recent call first):\n"+t}}RuntimeError.prototype.toString=function(){return`${this.name}: ${this.details}
${this.generateTraceback()}`};class Position{constructor(t,e,r,n,s){this.index=t,this.line=e,this.column=r,this.fileName=n,this.fileText=s}advance(t=null){return this.index++,this.column++,"\n"===t&&(this.line++,this.column=0),this}reverse(){return this.index--,this.column--,-1===this.index&&(this.line--,this.column=this.fileText.split("\r\n")[this.line].length),this}copy(){return new Position(this.index,this.line,this.column,this.fileName,this.fileText)}}class Token{constructor(t,e=null,r,n=null){this.type=t,this.value=e,this.start=r.copy(),this.end=r.copy(),this.end.advance(),exists(n)&&(this.end=n.copy())}asString(){switch(this.type){case TOKEN.PLUS:return"+";case TOKEN.MIN:return"-";case TOKEN.MUL:return"*";case TOKEN.DIV:return"/";case TOKEN.MOD:return"%";case TOKEN.HASH:return"#";case TOKEN.INT:case TOKEN.FLOAT:case TOKEN.BOOLEAN:case TOKEN.STRING:case TOKEN.NIL:case TOKEN.KEYWORD:case TOKEN.IDENTIFIER:return this.value.toString();case TOKEN.NOT:return"!";case TOKEN.EQ:return"=";case TOKEN.EE:return"==";case TOKEN.NE:return"!=";case TOKEN.GT:return">";case TOKEN.GTE:return">=";case TOKEN.LT:return"<";case TOKEN.LTE:return"<=";case TOKEN.AND:return"&&";case TOKEN.OR:return"||";case TOKEN.ARROW:return"=>";case TOKEN.PE:return"+=";case TOKEN.ME:return"-=";case TOKEN.LPAREN:return"(";case TOKEN.RPAREN:return")";case TOKEN.COMMA:return",";case TOKEN.NEWLINE:return"<NEWLINE>";case TOKEN.EOF:return"<EOF>"}}matches(t,e){if("string"===type(e))return this.type===t&&this.value===e;for(let r of e)if(this.type===t&&this.value===r)return!0;return!1}}class Tokenizer{constructor(t,e){this.string=t,this.pos=new Position(-1,0,-1,e,t),this.currentCharacter="",this.advance()}advance(){this.pos.advance(this.currentCharacter),this.currentCharacter=this.pos.index<this.string.length?this.string[this.pos.index]:null}reverse(){this.pos.reverse(),this.currentCharacter=this.pos.index>-1?this.string[this.pos.index]:null}tokenize(){let t=[];for(;exists(this.currentCharacter);)if(" 	".includes(this.currentCharacter))this.advance();else if("\n;\r".includes(this.currentCharacter))t.push(this.makeNewLine());else if(DIGITS.includes(this.currentCharacter))t.push(this.makeDigitToken());else if(LETTERS.includes(this.currentCharacter))t.push(this.makeIdentifierToken());else if("`'\"".includes(this.currentCharacter))t.push(this.makeString());else if("+"===this.currentCharacter)t.push(this.makePlusEqualsToken());else if("-"===this.currentCharacter){let e=this.makeMinusEqualsToken();e&&t.push(e)}else if("*"===this.currentCharacter)t.push(new Token(TOKEN.MUL,null,this.pos)),this.advance();else if("/"===this.currentCharacter)t.push(new Token(TOKEN.DIV,null,this.pos)),this.advance();else if("%"===this.currentCharacter)t.push(new Token(TOKEN.MOD,null,this.pos)),this.advance();else if("#"===this.currentCharacter)t.push(new Token(TOKEN.HASH,null,this.pos)),this.advance();else if("("===this.currentCharacter)t.push(new Token(TOKEN.LPAREN,null,this.pos)),this.advance();else if(")"===this.currentCharacter)t.push(new Token(TOKEN.RPAREN,null,this.pos)),this.advance();else if("["===this.currentCharacter)t.push(new Token(TOKEN.LSQUARE,null,this.pos)),this.advance();else if("]"===this.currentCharacter)t.push(new Token(TOKEN.RSQUARE,null,this.pos)),this.advance();else if(","===this.currentCharacter)t.push(new Token(TOKEN.COMMA,null,this.pos)),this.advance();else if("|"===this.currentCharacter)t.push(this.makeOR());else if("&"===this.currentCharacter)t.push(this.makeAND());else if("!"===this.currentCharacter)t.push(this.makeNotOrNotEquals());else if("="===this.currentCharacter)t.push(this.makeEqualsOrArrow());else if(">"===this.currentCharacter)t.push(this.makeGreaterOrEqual());else if("<"===this.currentCharacter)t.push(this.makeLessOrEqual());else{let r=this.currentCharacter,n=this.pos.copy();throw this.advance(),new IllegalCharError(n,this.pos,`'${r}'`)}return t.push(new Token(TOKEN.EOF,null,this.pos)),t}makeDigitToken(){let t=this.pos.copy(),e=this.currentCharacter,r=0;for(this.advance();(DIGITS+".").includes(this.currentCharacter);){if("."===this.currentCharacter&&++r>1)throw this.advance(),new InvalidSyntaxError(t,this.pos,"Malformed number");e+=this.currentCharacter,this.advance()}return 0===r?new Token(TOKEN.INT,parseInt(e),t,this.pos.copy()):new Token(TOKEN.FLOAT,parseFloat(e),t,this.pos.copy())}makeIdentifierToken(){let t=this.pos.copy(),e=this.currentCharacter;for(this.advance();(LETTERS+"_").includes(this.currentCharacter);)e+=this.currentCharacter,this.advance();return["true","false"].includes(e)?new Token(TOKEN.BOOLEAN,e.includes("true"),t,this.pos):"nil"===e?new Token(TOKEN.NIL,null,t,this.pos):KEYWORDS.includes(e)?new Token(TOKEN.KEYWORD,e,t,this.pos):new Token(TOKEN.IDENTIFIER,e,t,this.pos)}makeNewLine(){let t=this.pos.copy();for(this.advance();"\n\r;".includes(this.currentCharacter);)this.advance();return new Token(TOKEN.NEWLINE,null,t,this.pos)}makeString(){let t=this.currentCharacter,e="";this.advance();let r=this.pos.copy();for(;exists(this.currentCharacter)&&this.currentCharacter!==t;)e+=this.currentCharacter,this.advance();return this.advance(),new Token(TOKEN.STRING,e,r,this.pos)}makePlusEqualsToken(){let t=this.pos.copy();return(this.advance(),"="===this.currentCharacter)?(this.advance(),new Token(TOKEN.PE,null,t,this.pos)):new Token(TOKEN.PLUS,null,t)}makeMinusEqualsToken(){let t=this.pos.copy();if(this.advance(),"="===this.currentCharacter)return this.advance(),new Token(TOKEN.ME,null,t,this.pos);if("-"===this.currentCharacter){for(;exists(this.currentCharacter)&&"\n"!==this.currentCharacter;)this.advance();return new Token(TOKEN.NEWLINE,null,t,this.pos)}return new Token(TOKEN.MIN,null,t)}makeOR(){let t=this.pos.copy();if(this.advance(),"|"===this.currentCharacter)return this.advance(),new Token(TOKEN.OR,null,t,this.pos);throw new InvalidSyntaxError(t,this.pos,"Invalid operator")}makeAND(){let t=this.pos.copy();if(this.advance(),"&"===this.currentCharacter)return this.advance(),new Token(TOKEN.AND,null,t,this.pos);throw new InvalidSyntaxError(t,this.pos,"Invalid operator")}makeNotOrNotEquals(){let t=this.pos.copy();return(this.advance(),"="===this.currentCharacter)?(this.advance(),new Token(TOKEN.NE,null,t,this.pos)):new Token(TOKEN.NOT,null,t)}makeEqualsOrArrow(){let t=this.pos.copy();return(this.advance(),">"===this.currentCharacter)?(this.advance(),new Token(TOKEN.ARROW,null,t,this.pos)):"="===this.currentCharacter?(this.advance(),new Token(TOKEN.EE,null,t,this.pos)):new Token(TOKEN.EQ,null,t,this.pos)}makeGreaterOrEqual(){let t=this.pos.copy();return(this.advance(),"="===this.currentCharacter)?(this.advance(),new Token(TOKEN.GTE,null,t,this.pos)):new Token(TOKEN.GT,null,t,this.pos)}makeLessOrEqual(){let t=this.pos.copy();return(this.advance(),"="===this.currentCharacter)?(this.advance(),new Token(TOKEN.LTE,null,t,this.pos)):new Token(TOKEN.LT,null,t,this.pos)}}class Parser{constructor(t){this.tokens=t,this.tokenIndex=0,this.currentToken=this.tokens[0]}advance(){this.tokenIndex++,this.tokenIndex<this.tokens.length&&(this.currentToken=this.tokens[this.tokenIndex])}parse(){let t=this.parseStatements();if(this.currentToken.type!==TOKEN.EOF)throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,`Unexpected token '${this.currentToken.asString()}'`);return t}parseStatements(){let t=[],e=this.currentToken.start.copy();for(;this.currentToken.type===TOKEN.NEWLINE;)this.advance();for(;this.currentToken.type!==TOKEN.EOF;){let r=this.parseStatement();if(t.push(r),this.currentToken.type!==TOKEN.NEWLINE){if(this.currentToken.type===TOKEN.EOF)break;throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Token cannot appear after previous tokens")}for(;this.currentToken.type===TOKEN.NEWLINE;)this.advance();if(this.currentToken.matches(TOKEN.KEYWORD,["end","else","elif"]))break}return new StatementNode(t,e,this.currentToken.end)}parseStatement(){let t=this.currentToken.start;if(this.currentToken.matches(TOKEN.KEYWORD,"return")){if(this.advance(),this.currentToken===TOKEN.NEWLINE)return new ReturnNode(null,t,this.currentToken.end);{let e=this.parseExpr();return new ReturnNode(e,t,this.currentToken.end)}}return this.parseExpr()}parseExpr(){let t=this.parseCompExpr();for(;[TOKEN.AND,TOKEN.OR].includes(this.currentToken.type);){let e=this.currentToken;this.advance();let r=this.parseCompExpr();t=new BinaryOperatorNode(t,e,r)}return t}parseCompExpr(){if(this.currentToken.type===TOKEN.NOT){let t=this.currentToken;this.advance();let e=this.parseCompExpr();return new UnaryOperatorNode(t,e)}let r=this.parseArithExpr();for(;[TOKEN.EE,TOKEN.NE,TOKEN.GT,TOKEN.GTE,TOKEN.LT,TOKEN.LTE].includes(this.currentToken.type);){let n=this.currentToken;this.advance();let s=this.parseArithExpr();r=new BinaryOperatorNode(r,n,s)}return r}parseArithExpr(){let t=this.parseTerm();for(;[TOKEN.PLUS,TOKEN.MIN].includes(this.currentToken.type);){let e=this.currentToken;this.advance();let r=this.parseTerm();t=new BinaryOperatorNode(t,e,r)}return t}parseTerm(){let t=this.parseFactor();for(;[TOKEN.MUL,TOKEN.DIV,TOKEN.MOD].includes(this.currentToken.type);){let e=this.currentToken;this.advance();let r=this.parseFactor();t=new BinaryOperatorNode(t,e,r)}return t}parseFactor(){let t=this.currentToken;if([TOKEN.PLUS,TOKEN.MIN].includes(t.type)){this.advance();let e=this.parseFactor();return new UnaryOperatorNode(t,e)}return this.parseCall()}parseCall(){let t=this.parseListAccess(),e=this.currentToken.start;if(this.currentToken.type===TOKEN.LPAREN){let r;this.advance();let n=[];if(this.currentToken.type===TOKEN.RPAREN)r=this.currentToken.end,this.advance();else{for(n.push(this.parseExpr());this.currentToken.type===TOKEN.COMMA;)this.advance(),n.push(this.parseExpr());if(this.currentToken.type!==TOKEN.RPAREN)throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected ',' or ')'");r=this.currentToken.end,this.advance()}return new CallNode(t,n,e,r)}return t}parseListAccess(){let t=this.parseAtom();for(;this.currentToken.type===TOKEN.HASH;){let e=this.currentToken;this.advance();let r=this.parseAtom();t=new BinaryOperatorNode(t,e,r)}return t}parseAtom(){let t=this.currentToken;if(t.type===TOKEN.IDENTIFIER){let e=new IdentifierNode(t);if(this.advance(),this.currentToken.type===TOKEN.EQ){let r=this.currentToken;this.advance();let n=this.parseExpr();return new BinaryOperatorNode(e,r,n)}if(this.currentToken.type===TOKEN.PE){let s=this.currentToken;this.advance();let i=this.parseExpr();return new BinaryOperatorNode(e,s,i)}{if(this.currentToken.type!==TOKEN.ME)return e;let a=this.currentToken;this.advance();let o=this.parseExpr();return new BinaryOperatorNode(e,a,o)}}if([TOKEN.INT,TOKEN.FLOAT].includes(t.type))return this.advance(),new NumberNode(t);if(t.type===TOKEN.BOOLEAN)return this.advance(),new BooleanNode(t);if(t.type===TOKEN.STRING)return this.advance(),new StringNode(t);if(t.type===TOKEN.NIL)return this.advance(),new NilNode(t);else if(t.type===TOKEN.LPAREN){this.advance();let h=this.parseExpr();if(this.currentToken.type===TOKEN.RPAREN)return this.advance(),h;throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected ')'")}else if(t.type===TOKEN.LSQUARE)return this.parseListExpression();else if(t.matches(TOKEN.KEYWORD,"function"))return this.parseFunctionDefinition();else if(t.matches(TOKEN.KEYWORD,"for"))return this.parseForStatement();else if(t.matches(TOKEN.KEYWORD,"while"))return this.parseWhileStatement();else if(t.matches(TOKEN.KEYWORD,"if"))return this.parseIfStatement();throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,`Unexpected end of input '${this.currentToken.asString()}'`)}parseFunctionDefinition(){let t=this.currentToken;if(!this.currentToken.matches(TOKEN.KEYWORD,"function"))throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected 'function'");if(this.advance(),this.currentToken.type!==TOKEN.LPAREN)throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected '('");this.advance();let e=[];if(this.currentToken.type===TOKEN.IDENTIFIER){for(e.push(this.currentToken),this.advance();this.currentToken.type===TOKEN.COMMA;){if(this.advance(),this.currentToken.type!==TOKEN.IDENTIFIER)throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected identifier");e.push(this.currentToken),this.advance()}if(this.currentToken.type!==TOKEN.RPAREN)throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected ',' or ')'")}else if(this.currentToken.type!==TOKEN.RPAREN)throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected identifier or ')'");if(this.advance(),this.currentToken.type===TOKEN.ARROW){this.advance();let r=this.parseExpr();return new FunctionDeclarationNode(null,e.map(t=>t.value),new ReturnNode(r),t,t.start,this.currentToken.end)}if(this.currentToken.matches(TOKEN.KEYWORD,"do")){this.advance();let n=this.parseStatements();if(!this.currentToken.matches(TOKEN.KEYWORD,"end"))throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected 'end'");return this.advance(),new FunctionDeclarationNode(null,e.map(t=>t.value),n,t,t.start,this.currentToken.end)}throw new InvalidSyntaxError(this.currentToken.start,this.current,"Expected expression")}parseForStatement(){if(!this.currentToken.matches(TOKEN.KEYWORD,"for"))throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected 'for'");if(this.advance(),this.currentToken.type!==TOKEN.IDENTIFIER)throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected identifier");let t=this.currentToken;if(this.advance(),this.currentToken.type!==TOKEN.EQ)throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected '='");this.advance();let e=this.parseExpr();if(this.currentToken.type!==TOKEN.COMMA)throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected ','");this.advance();let r=this.parseExpr(),n;if(this.currentToken.type===TOKEN.COMMA&&(this.advance(),n=this.parseExpr()),this.currentToken.matches(TOKEN.KEYWORD,"do")){this.advance();let s=this.parseStatements();if(!this.currentToken.matches(TOKEN.KEYWORD,"end"))throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected 'end'");return this.advance(),new ForStatementNode(t,e,r,n,s)}throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected 'do'")}parseWhileStatement(){if(!this.currentToken.matches(TOKEN.KEYWORD,"while"))throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected 'while'");this.advance();let t=this.parseExpr();if(!this.currentToken.matches(TOKEN.KEYWORD,"do"))throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected 'do'");this.advance();let e=this.parseStatements();if(!this.currentToken.matches(TOKEN.KEYWORD,"end"))throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected 'end'");return this.advance(),new WhileStatementNode(t,e)}parseIfStatement(){if(!this.currentToken.matches(TOKEN.KEYWORD,"if"))throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected 'if'");let t=[];this.advance();let e=this.parseExpr();if(!this.currentToken.matches(TOKEN.KEYWORD,"do"))throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected 'do'");this.advance();let r=this.parseStatements();if(t.push({condition:e,body:r}),this.currentToken.matches(TOKEN.KEYWORD,"end"))return this.advance(),new IfStatementNode(t);if(this.currentToken.matches(TOKEN.KEYWORD,"elif"))for(;this.currentToken.matches(TOKEN.KEYWORD,"elif");){this.advance();let n=this.parseExpr();if(!this.currentToken.matches(TOKEN.KEYWORD,"do"))throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected 'do'");this.advance();let s=this.parseStatements();t.push({condition:n,body:s})}if(this.currentToken.matches(TOKEN.KEYWORD,"end"))return this.advance(),new IfStatementNode(t);{this.currentToken.matches(TOKEN.KEYWORD,"else"),this.advance();let i=this.parseStatements();if(t.push({condition:!0,body:i}),!this.currentToken.matches(TOKEN.KEYWORD,"end"))throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected 'end'");return this.advance(),new IfStatementNode(t)}}parseListExpression(){let t=[],e=this.currentToken.start;if(this.currentToken.type!==TOKEN.LSQUARE)throw new InvalidSyntaxError(this.currentToken.start,this.currentToken.end,"Expected '['");if(this.advance(),this.currentToken.type===TOKEN.RSQUARE)return this.advance(),new ListNode(t,e,this.currentToken.start);for(t.push(this.parseExpr());this.currentToken.type===TOKEN.COMMA;){this.advance();let r=this.parseExpr();t.push(r)}if(this.currentToken.type!==TOKEN.RSQUARE)throw new InvalidSyntaxError(e,this.currentToken.end,"Expected ']' or ','");return this.advance(),new ListNode(t,e,this.currentToken.end)}}class Interpreter{constructor(t,e){this.tree=t,this.context=e,this.returnValue=null}evaluate(){try{return this.process(this.tree)}catch(t){if("return"===t)return this.returnValue;throw t}}process(t){if(t instanceof StatementNode){let e=t.statements.map(t=>this.process(t));return e.type="statements",e}if(t instanceof ListNode){let r=t.elements.map(t=>this.process(t));return r.type="elements",r}if(t instanceof ReturnNode)throw this.returnValue=this.process(t.expr),"return";if(t instanceof IfStatementNode){for(let n of t.clauses)if(!0===n.condition||truthy(this.process(n.condition))){this.process(n.body);break}return null}if(t instanceof WhileStatementNode){for(;truthy(this.process(t.condition));)this.process(t.body);return null}if(t instanceof ForStatementNode){let s=this.process(t.startVal),i=this.process(t.targetVal),a=t.variableToken.value,o=1;if(t.step&&(o=this.process(t.step)),0===o)throw new RuntimeError(t.step.token.start,t.step.token.end,"For loop step cannot be 0",this.context);for(let h=s;h<i;h+=o)this.context.set(a,h),this.process(t.body);return null}if(t instanceof NumberNode||t instanceof BooleanNode||t instanceof StringNode||t instanceof NilNode)return t.token.value;if(t instanceof IdentifierNode){let c=this.context.get(t.token.value);if(exists(c))return c;throw new RuntimeError(t.token.start,t.token.end,`Identifier '${t.token.asString()}' is undefined.`,this.context)}if(t instanceof FunctionDeclarationNode){let u=new Function(t.name,t.body,t.args,this.context,t.start,t.end);return u}if(t instanceof CallNode){let l=t.args.map(t=>this.process(t));if(t.func instanceof IdentifierNode){let p=t.func.token.asString(),E=BUILTINS.find(t=>t.name===p);if(exists(E))return E.execute(t.start,t.end,this.context,...l)}let d=this.process(t.func);if(d instanceof Function){let{output:T,error:N}=d.execute(t.start,t.end,...l);if(N)throw N;return T}throw new RuntimeError(t.func.token.start,t.func.token.end,`'${d}' is not a function`,this.context)}if(t instanceof UnaryOperatorNode){let f=this.process(t.right);switch(t.token.type){case TOKEN.PLUS:if("number"===type(f))return f;case TOKEN.MIN:if("number"===type(f))return -1*f;case TOKEN.NOT:if("boolean"===type(f))return!f}throw new RuntimeError(t.token.start,t.token.end,`Invalid operator '${t.token.asString()}' for type '${type(f)}'`,this.context)}if(t instanceof BinaryOperatorNode){let k=this.process(t.right);if(t.token.type===TOKEN.EQ){if(t.left.token.type===TOKEN.IDENTIFIER){switch(t.right.constructor){case ForStatementNode:throw new InvalidSyntaxError(t.token.start,t.token.end,"Cannot assign 'for'");case IfStatementNode:throw new InvalidSyntaxError(t.token.start,t.token.end,"Cannot assign 'if'");case WhileStatementNode:throw new InvalidSyntaxError(t.token.start,t.token.end,"Cannot assign 'while'")}if(BUILTINS.some(e=>e.name===t.left.token.value))throw new InvalidSyntaxError(t.left.token.start,t.left.token.end,`Cannot assign builtin '${t.left.token.value}'`);return this.context.set(t.left.token.value,k),k instanceof Function&&(k.name=t.left.token.value),k}throw new InvalidSyntaxError(t.left.start,t.left.end,"Invalid left-hand side in assignment")}let O=this.process(t.left);if(t.token.type===TOKEN.OR)return truthy(O)?O:k;if(t.token.type===TOKEN.AND)return truthy(O)?k:O;if(t.token.type===TOKEN.PE||t.token.type===TOKEN.ME){let m=t.token.type===TOKEN.PE?1:-1;if(t.left.token.type!==TOKEN.IDENTIFIER)throw new InvalidSyntaxError(t.left.token.start,t.left.token.end,"Invalid left-hand side in assignment");let w=this.context.get(t.left.token.value);if(!exists(w))throw new InvalidSyntaxError(t.left.token.start,t.left.token.end,`Identifier '${t.left.token.asString()}' is undefined.`);if("string"===type(w)&&"string"===type(k)){if(1===m)return this.context.set(t.left.token.value,w+k),w+k;throw new RuntimeError(t.token.start,t.token.end,`Invalid operator '${t.token.asString()}' for type 'string' and 'string'`,this.context)}if("number"===type(w)&&"number"===type(k))return this.context.set(t.left.token.value,w+k*m),w+k*m;throw new RuntimeError(t.token.start,t.token.end,`Invalid expression between types '${type(w)}' and '${type(k)}'`,this.context)}if(t.token.type===TOKEN.MUL){if("string"===type(O)&&"number"===type(k))return O.repeat(k);if("number"===type(O)&&"string"===type(k))return k.repeat(O)}if(t.token.type===TOKEN.HASH&&"list"===type(O)&&"number"===type(k)){if(k>=0&&k<O.length)return O[k];throw new RuntimeError(t.token.start,t.token.end,"Index out of range",this.context)}switch(t.token.type){case TOKEN.EE:return O===k;case TOKEN.NE:return O!==k}if(type(O)===type(k)){if("boolean"===type(O))switch(t.token.type){case TOKEN.AND:return O&&k;case TOKEN.OR:return O||k}else if("string"===type(O)){if(t.token.type===TOKEN.PLUS)return O+k}else if("number"===type(O))switch(t.token.type){case TOKEN.PLUS:return O+k;case TOKEN.MIN:return O-k;case TOKEN.MUL:return O*k;case TOKEN.DIV:if(0===k)throw new RuntimeError(t.token.start,t.token.end,"Division by zero",this.context);return O/k;case TOKEN.MOD:if(0===k)throw new RuntimeError(t.token.start,t.token.end,"Modulo by zero",this.context);return mod(O,k);case TOKEN.LT:return O<k;case TOKEN.LTE:return O<=k;case TOKEN.GT:return O>k;case TOKEN.GTE:return O>=k}throw new RuntimeError(t.token.start,t.token.end,`Invalid operator '${t.token.asString()}' for type '${type(O)}'`,this.context)}throw new RuntimeError(t.token.start,t.token.end,`Invalid operator '${t.token.asString()}' for type '${type(O)}' and '${type(k)}'`,this.context)}throw new RuntimeError(new Position(0,0,0,"",""),new Position(0,0,0,"",""),`Invalid node type '${t}'. This should not happen.`,this.context)}}class Function{constructor(t,e,r,n,s,i){this.name=t??"<anonymous>",this.bodyNode=e,this.args=r,this.context=n,this.start=s,this.end=i}execute(t,e,...r){if(r.length!==this.args.length)throw new RuntimeError(t,e,`${this.args.length} arguments were expected, received ${r.length}`,this.context);let n=new Context(this.name,this.context,t);for(let s=0;s<r.length;s++){let i=this.args[s],a=r[s];n.set(i,a)}let o=new Interpreter(this.bodyNode,n),h;try{h=o.evaluate()}catch(c){return{error:c,output:null}}return{output:h,error:null}}}Function.prototype.toString=function(){return`[function ${this.name}]`};class Context{constructor(t,e=null,r=null){this.displayName=t,this.parent=e,this.pos=r,this.symbols={}}get(t){let e=this.symbols[t];return!exists(e)&&exists(this.parent)?this.parent.get(t):e}set(t,e){this.symbols[t]=e}remove(t){this.symbols[t]=void 0}}class Node{constructor(t,e,r){this.left=t,this.token=e,this.right=r}stringRepresentation(){return this instanceof NumberNode?`(${this.token.asString()})`:this instanceof UnaryOperatorNode?`(${this.token.asString()}${this.right.stringRepresentation()})`:`(${this.left.stringRepresentation()}${this.token.asString()}${this.right.stringRepresentation()})`}}class BinaryOperatorNode extends Node{constructor(t,e,r){super(t,e,r)}}class UnaryOperatorNode extends Node{constructor(t,e){super(null,t,e)}}class IdentifierNode extends Node{constructor(t){super(null,t,null)}}class FunctionDeclarationNode extends Node{constructor(t,e,r,n,s,i){super(),this.name=t,this.args=e,this.body=r,this.token=n,this.start=s,this.end=i}}class ReturnNode extends Node{constructor(t){super(),this.expr=t}}class CallNode extends Node{constructor(t,e,r,n){super(),this.args=e,this.func=t,this.start=r,this.end=n}}class IfStatementNode extends Node{constructor(t){super(),this.clauses=t}}class ForStatementNode extends Node{constructor(t,e,r,n,s){super(),this.variableToken=t,this.startVal=e,this.targetVal=r,this.step=n,this.body=s}}class WhileStatementNode extends Node{constructor(t,e){super(),this.condition=t,this.body=e}}class NumberNode extends Node{constructor(t){super(null,t,null)}}class BooleanNode extends Node{constructor(t){super(null,t,null)}}class StringNode extends Node{constructor(t){super(null,t,null)}}class NilNode extends Node{constructor(t){super(null,t,null)}}class StatementNode extends Node{constructor(t,e,r){super(),this.statements=t,this.start=e,this.end=r}}class ListNode extends Node{constructor(t,e,r){super(),this.elements=t,this.start=e,this.end=r}}const context=new Context("<program>",null,new Position(0,0,0,"<program>",""));context.set("PI",3.1415926);class Builtin{constructor(t,e,r,n){this.name=t,this.func=e,this.argsNumber=r,this.context=n}execute(t,e,r,...n){if(this.context=r,this.start=t,this.end=e,"Array"===this.argsNumber.constructor.name){if(!this.argsNumber.includes(n.length)){let s=this.argsNumber.map((t,e)=>e===this.argsNumber.length-1?` or ${t}`:0===e?`${t}`:`, ${t}`).join("");throw new RuntimeError(t,e,`${s} argument${1===this.argsNumber[this.argsNumber.length-1]?" was":"s were"} expected, received ${n.length}`,this.context)}}else if("Object"===this.argsNumber.constructor.name){if(-1===this.argsNumber.max){if(n.length<this.argsNumber.min)throw new RuntimeError(t,e,`${this.argsNumber.min} or more arguments were expected, received ${n.length}`,this.context)}else if(n.length<this.argsNumber.min||n.length>this.argsNumber.max)throw new RuntimeError(t,e,`Between ${this.argsNumber.min} and ${this.argsNumber.max} arguments were expected, received ${n.length}`,this.context)}else if(-1!==this.argsNumber&&n.length!==this.argsNumber)throw new RuntimeError(t,e,`${this.argsNumber} arguments were expected, received ${n.length}`,this.context);return this.func(...n)}}const BUILTINS=[new Builtin("print",function(...t){return console.log(...t.map(formatOutput)),null},{min:1,max:-1}),new Builtin("input",function(t){return prompt(t)},{min:0,max:1},context),new Builtin("str",function(t){return t.toString()},1),new Builtin("num",function(t){let e=parseFloat(t);if(!isNaN(e))return e;throw new RuntimeError(this.start,this.end,`Invalid number '${formatOutput(t)}'`)},1),new Builtin("type",function(t){return type(t)},1),new Builtin("sqrt",function(t){return Math.sqrt(t)},1),new Builtin("floor",function(t){return Math.floor(t)},1),new Builtin("length",function(t){return t.length},1),new Builtin("set",function(t,e,r){return t[e]=r,t},3),new Builtin("fetch",function(t){let e=new XMLHttpRequest;return e.open("GET",t,!1),e.send(),e.responseText},1)];function evaluate(t,e){let r=new Tokenizer(e,t),n;try{n=r.tokenize()}catch(s){return{error:formatOutput(s)}}let i=new Parser(n),a;try{a=i.parse()}catch(o){return{error:formatOutput(o)}}let h=new Interpreter(a,context),c;try{c=h.evaluate()}catch(u){return{error:formatOutput(u)}}return{output:formatOutput(c)}}function formatOutput(t){if(t instanceof OsklangError){let e=t.lineText+"\n",r=t.end.column-t.start.column;return r<1&&(r=1),e+=" ".repeat(t.start.column)+"^".repeat(r)+"\n",e+=t.toString()}if(t instanceof Error)return t;if(null===t)return"nil";if(t instanceof Array){if("statements"===t.type){let n=t[t.length-1];return exists(n)?formatOutput(n):formatOutput(null)}return"["+t.map(formatOutput).join(", ")+"]"}return"string"===type(t)?`${t.replace(/'/g,"\\'")}`:t.toString()}module.exports={evaluate};